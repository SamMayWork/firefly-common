// Code generated by mockery v2.37.1. DO NOT EDIT.

package wsservermocks

import (
	http "net/http"

	wsserver "github.com/hyperledger/firefly-common/pkg/wsserver"
	mock "github.com/stretchr/testify/mock"
)

// WebSocketServer is an autogenerated mock type for the WebSocketServer type
type WebSocketServer struct {
	mock.Mock
}

// Close provides a mock function with given fields:
func (_m *WebSocketServer) Close() {
	_m.Called()
}

// GetChannels provides a mock function with given fields: streamName
func (_m *WebSocketServer) GetChannels(streamName string) (chan<- interface{}, chan<- interface{}, <-chan *wsserver.WebSocketCommandMessageOrError) {
	ret := _m.Called(streamName)

	var r0 chan<- interface{}
	var r1 chan<- interface{}
	var r2 <-chan *wsserver.WebSocketCommandMessageOrError
	if rf, ok := ret.Get(0).(func(string) (chan<- interface{}, chan<- interface{}, <-chan *wsserver.WebSocketCommandMessageOrError)); ok {
		return rf(streamName)
	}
	if rf, ok := ret.Get(0).(func(string) chan<- interface{}); ok {
		r0 = rf(streamName)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(chan<- interface{})
		}
	}

	if rf, ok := ret.Get(1).(func(string) chan<- interface{}); ok {
		r1 = rf(streamName)
	} else {
		if ret.Get(1) != nil {
			r1 = ret.Get(1).(chan<- interface{})
		}
	}

	if rf, ok := ret.Get(2).(func(string) <-chan *wsserver.WebSocketCommandMessageOrError); ok {
		r2 = rf(streamName)
	} else {
		if ret.Get(2) != nil {
			r2 = ret.Get(2).(<-chan *wsserver.WebSocketCommandMessageOrError)
		}
	}

	return r0, r1, r2
}

// Handler provides a mock function with given fields: w, r
func (_m *WebSocketServer) Handler(w http.ResponseWriter, r *http.Request) {
	_m.Called(w, r)
}

// NewWebSocketServer creates a new instance of WebSocketServer. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewWebSocketServer(t interface {
	mock.TestingT
	Cleanup(func())
}) *WebSocketServer {
	mock := &WebSocketServer{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
